extend type Query {
  geography: GeographyQuery!
}

type GeographyQuery {
  """
  Returns Cities list bundle
  """
  cities(
    first: Int
    offset: Int
    after: String
    orderBy: [CitiesListOrderBy!]
    filter: CitiesListFilter
    search: [CitiesSearch!]
  ): CitiesListConnection!

  """
  Returns States list bundle
  """
  states(
    first: Int
    offset: Int
    after: String
    orderBy: [StatesListOrderBy!]
    filter: StatesListFilter
    search: [StatesSearch!]
  ): StatesListConnection!

  """
  Returns Countries list bundle
  """
  countries(
    first: Int
    offset: Int
    after: String
    orderBy: [CountriesListOrderBy!]
    filter: CountriesListFilter
    search: [CountriesSearch!]
  ): CountriesListConnection!

  country(id: ID!): Country
  state(id: ID!): State
  city(id: ID!): City

  addressLookup(
    query: String
    country: String
    city: String
    street: String
    state: String
    houseNumber: String
  ): [AddressLookupResponse!]
}

type AddressLookupResponse {
  latitude: String!
  longitude: String!
  street: String!
  houseNumber: String!
  place: String!
  city: City
}

"""
Possible data to order list of cities
"""
input CitiesListOrderBy {
  field: CitiesListOrderField!
  direction: OrderDirection!
}

"""
Possible data to order list of states
"""
input StatesListOrderBy {
  field: StatesListOrderField!
  direction: OrderDirection!
}

"""
Possible data to order list of countries
"""
input CountriesListOrderBy {
  field: CountriesListOrderField!
  direction: OrderDirection!
}

enum CitiesSearchField {
  en
  ru
}

enum StatesSearchField {
  en
  ru
  stateCode
}

enum CountriesSearchField {
  en
  ru
  iso2
  iso3
}

input CitiesSearch {
  field: CitiesSearchField!
  query: String!
}

input StatesSearch {
  field: StatesSearchField!
  query: String!
}

input CountriesSearch {
  field: CountriesSearchField!
  query: String!
}

input CitiesListFilter {
  state: [ID]
  stateCode: [String]
  country: [ID]
  countryCode: [String]
  timezone: [String]
}

input StatesListFilter {
  id: [ID]
  stateCode: [String]
  country: [ID]
  countryCode: [String]
}

input CountriesListFilter {
  id: [ID]
  iso3: [String]
  iso2: [String]
  phoneCode: [String]
  currency: [String]
  capital: [ID]
}

enum CitiesListOrderField {
  en
  ru
  state
  stateCode
  country
  countryCode
  timezone
}

enum StatesListOrderField {
  en
  ru
  stateCode
  countryCode
  country
}

enum CountriesListOrderField {
  en
  ru
  iso2
  iso3
  currency
}

"""
Cities list connection
"""
type CitiesListConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CitiesEdge!]!
}

"""
Countries list connection
"""
type CountriesListConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CountriesEdge!]!
}

"""
States list connection
"""
type StatesListConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [StatesEdge!]!
}

"""
City edge bundle
"""
type CitiesEdge {
  node: City!
  cursor: String!
}

"""
Countries edge bundle
"""
type CountriesEdge {
  node: Country!
  cursor: String!
}

"""
States edge bundle
"""
type StatesEdge {
  node: State!
  cursor: String!
}

type Country {
  id: ID!

  """
  Original name
  """
  en: String!

  """
  The name translated into Russian language
  """
  ru: String!
  iso3: String!
  iso2: String!
  phoneCode: String!
  currency: String!
  capital: City
}

type State {
  id: ID!
  """
  Original name
  """
  en: String!

  """
  The name translated into Russian language
  """
  ru: String!
  country: Country!
  countryCode: String!
  stateCode: String!
}

type City {
  id: ID!
  """
  Original name
  """
  en: String!

  """
  The name translated into Russian language
  """
  ru: String!
  country: Country!
  countryCode: String!
  state: State!
  stateCode: String!
  latitude: String!
  longitude: String!
  timezone: String!
}
